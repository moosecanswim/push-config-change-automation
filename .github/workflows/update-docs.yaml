
name: Create PR to update helm versions

on:
  push:
    branches:
      - actions

jobs:
  get-current-chart-release-versions:
    name: Get current helm chart release versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Fetch history
        run: git fetch --prune --unshallow

      # Install Helm for dependencies
      - name: Install Helm
        uses: azure/setup-helm@v1
        id: install-helm

      - name: Get current latest helm releases and build chart-versions.json
        env:
          REPO_NAME: greymatter
          REPO_URL: https://greymatter-io.github.io/helm-charts
        run: |
          helm repo add $REPO_NAME $REPO_URL
          helm repo update

          # Note: this pulls in all charts hosted at the "greymatter" repo we just added
          helm search repo $REPO_NAME/ -o json | jq '.[] | {(.name): (.version)}' | jq -n '[inputs] | add' >> chart-versions.json
          sed -i -e "s/$REPO_NAME\///g" chart-versions.json
          sed -i -e 's/agent/spire_agent/g' chart-versions.json
          sed -i -e 's/server/spire_server/g' chart-versions.json
          cat chart-versions.json

      - name: Export chart versions
        uses: actions/upload-artifact@v2
        with:
          name: chart-versions
          path: chart-versions.json
  
  create_pr:
    name: Create PR to update book.json with new values
    needs: get-current-chart-release-versions
    runs-on: ubuntu-latest
    steps:
      - name: Pull in chart-versions.json from prior step
        uses: actions/download-artifact@v2
        with:
          name: chart-versions

      - name: Update book.json and push to gitbook
        run: | 
          

          # ------------Source Desired Envvars from chart-versions artifact ---------------------
          cts=( fabric sense edge secrets spire_agent spire_server )
          for i in ${cts[@]};do
              echo ${i}
              export "${i}=$(cat chart-versions.json | jq -r --arg input ${i} '.[$input]')"
          done

          # ------------Set up Git and Git Variables ---------------------
          TARGET_REPO=github.com/moosecanswim/test-config-change-automation.git
          git config --global user.email "62956126+helm-charts@users.noreply.github.com"
          git config --global user.name $GITHUB_ACTOR
          
          SHORT_DATE="$(date +"%Y-%m-%d")"
          LONG_DATE="$(date '+%d%m%Y%H%M%S')"
          BRANCH_NAME=$(echo ${GITHUB_REF}| awk -F/ '{print $3}')
          NEW_FEATURE_BRANCH_NAME="chart-increment/${BRANCH_NAME}-${LONG_DATE}"
          commit_message="${SHORT_DATE}: Automatic publish from helm-charts repo.  Incrementing Chart versions in book.json"

          git clone -o upstream https://${TARGET_REPO}
          
          cd test-config-change-automation
          git remote add origin https://${TARGET_REPO}
          

          # ------------Business logic---------------------
          
          cp book.json old-book.json

          # update book.json with the latest versions
          # sed -i -e "s|\"fabric\":.*|\"fabric\": \"$fabric\",|" book.json
          # sed -i -e "s|\"sense\":.*|\"sense\": \"$sense\",|" book.json
          # sed -i -e "s|\"edge\":.*|\"edge\": \"$edge\",|" book.json
          # sed -i -e "s|\"secrets\":.*|\"secrets\": \"$secrets\",|" book.json
          # sed -i -e "s|\"spire_agent\":.*|\"spire_agent\": \"$spire_agent\",|" book.json
          # # this is the last one in book.json so there is not comma
          # sed -i -e "s|\"spire_server\":.*|\"spire_server\": \"$spire_server\"|" book.json
          
          length=${#cts[@]}
          count=1
          for i in ${cts[@]};do
              echo "[${count}/${length}]"
              # echo ${i}
              echo "envar of ${i} is ${!i}"
              if [[ $count -lt $length ]]; then
                  sed -i -e "s|\"${i}\":.*|\"${i}\": \"${!i}\",|" book.json
              else
                  sed -i -e "s|\"${i}\":.*|\"${i}\": \"${!i}\"|" book.json
              fi
              count=$((count +1))
          done

          echo "The old book.json: "
          cat old-book.json

          echo "The new book.json: "
          cat book.json
          
          # This is ratchet but github actions currently exit on any exit code non 0.  diff responds with 1 if there is a difference
          # This allows us to capture the event where there are no changes since the diff only returns a string if there is a ... diff
          r=$(diff old-book.json book.json) || true
          if [[ ! -z $r ]]; then
            echo "The chart versions have changed. so we will be creating a pr"
            # ------------Git logic---------------------

            git checkout -b ${NEW_FEATURE_BRANCH_NAME}
            git remote set-url origin  https://${GITHUB_ACTOR}:${{ secrets.deploy_token }}@${TARGET_REPO}
            git add book.json
            git commit -m "${commit_message}"
            
            git push --set-upstream origin ${NEW_FEATURE_BRANCH_NAME}

            # This works.  let it be.
            echo "${{ secrets.deploy_token }}" > token.txt
            gh auth login --with-token < token.txt
            gh pr create --fill
          else
            echo "There have not been any changes to the versions so we will not update the mesh"
          fi